#!/usr/bin/python

import telebot
from telebot.types import LabeledPrice, ShippingOption
from threading import Thread
from botApp.text import tg_keyboard, messages
from botApp.commands import dbcon
from botApp.logs import logger
from backend import background
from botApp import config

# Run Backend
backend = Thread(target=background.run_backend)
backend.start()

### Loading config

API_TOKEN = config.API_KEY
bot = telebot.TeleBot(API_TOKEN)

### Payment data

provider_token = config.PROVIDER_TOKEN

# More about Payments: https://core.telegram.org/bots/payments

prices_1 = [LabeledPrice(label='–î–æ—Å—Ç—É–ø –Ω–∞ 1 –º–µ—Å—è—Ü', amount=7500)]
prices_2 = [LabeledPrice(label='–î–æ—Å—Ç—É–ø –Ω–∞ 3 –º–µ—Å—è—Ü–∞', amount=22500)]
prices_3 = [LabeledPrice(label='–î–æ—Å—Ç—É–ø –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤', amount=40500)]
shipping_options = [
    ShippingOption(id='instant', title='WorldWide Teleporter').add_price(LabeledPrice('Teleporter', 1000)),
    ShippingOption(id='pickup', title='Local pickup').add_price(LabeledPrice('Pickup', 300))]


###Admin
ADMIN_ID = config.ADMIN_ID


@bot.message_handler(commands=['start'])
def send_welcome(message):
    logger.logger(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, id - {message.from_user.id}")
    if dbcon.check_user_indb(message):
        bot.send_message(message.from_user.id,
                         messages.hello_message,
                         reply_markup=tg_keyboard.main_keyboard())
        dbcon.set_status(message, 20)
    else:
        bot.send_message(message.from_user.id,
                         messages.hello_message,
                         reply_markup=tg_keyboard.main_keyboard())
        logger.logger(message)
        bot.send_message(ADMIN_ID, f"""–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                                            {message.from_user.id}, {message.from_user.first_name}""")
        dbcon.add_new_user(message)
        dbcon.set_status(message, 20)


@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(message.from_user.id, messages.help_message, parse_mode="MARKDOWN")


@bot.message_handler(commands=['admin'])
def send_message(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.from_user.id, "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
    elif message.from_user.id == ADMIN_ID:
        bot.send_message(message.from_user.id, "–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                         reply_markup=tg_keyboard.admin_keyboard())
        dbcon.set_status(message, ADMIN_MENU)
    else:
        bot.send_message(message.from_user.id, "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")


#@bot.message_handler(commands=['auth_'])
#def send_auth(message):
#    dbcon.set_status(message, 10)
#    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
#   dbcon.set_status(message, 11) # —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞

# –°—Ç–∞—Ç—É—Å—ã
# 10 - —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –±–æ—Ç
# 11 - —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
# 20 - —Å—Ç–∞—Ç—É—Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
# 30 - –æ–∫–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–ü
# 40 - —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
# 50 - –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏
# 99 - –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
#
#
#
#

### Statuses

MAIN_MENU = 20
CREATE_MESSAGE_TO_SUPPORT = 30
GET_OPERATIONS_REQUEST = 40
PROMO_CODE = 60
CHECK_KEYS = 50
DONT_HAVE_KEYS = 51
ADMIN_MENU = 99

BROADCAST = 94

### Balances

MINIMAL_BALANCE = -5


@bot.message_handler(func=lambda message: True)
def status(message):
    sender_telegram_id = message.from_user.id
    logger.logger(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_telegram_id} –Ω–∞–ø–∏—Å–∞–ª - {message.text}")
    user_status = dbcon.get_status(message)


    if user_status == MAIN_MENU:

        if message.text == "–ë–∞–ª–∞–Ω—Å":
            dbcon.calc_balances()
            balance = dbcon.get_user_balance(sender_telegram_id)
            bot.send_message(sender_telegram_id, f"–í–∞—à –±–∞–ª–∞–Ω—Å {balance} —Ä—É–±.",
                             reply_markup=tg_keyboard.main_keyboard())

        elif message.text == "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É":
            dbcon.set_status(message, CREATE_MESSAGE_TO_SUPPORT)
            bot.send_message(sender_telegram_id, "–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è 100 —Å–∏–º–≤–æ–ª–æ–≤", reply_markup=telebot.types.ReplyKeyboardRemove())

        elif message.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å":
            user_id = dbcon.get_user_id(sender_telegram_id)
            #bot.send_message(sender_telegram_id, f"–°–ë–ü `+79635122453` –¢–∏–Ω—å–∫–æ—Ñ—ÑüôÇ\n–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ - `{user_id}`", parse_mode="MARKDOWN")
            logger.logger(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã")

            bot.send_message(message.chat.id,
                             "–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ—Ä–º–µ –æ–ø–ª–∞—Ç—ã...", parse_mode='Markdown')

            bot.send_invoice(message.chat.id,  # chat_id
                '–î–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ 1 –º–µ—Å—è—Ü',  # title
                ' –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π VPN —Å–µ—Ä–≤–µ—Ä',  # description
                '00001',  # invoice_payload
                provider_token,  # provider_token
                'RUB',  # currency
                prices_1, )

            bot.send_invoice(
                message.chat.id,  # chat_id
                '–î–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ 3 –º–µ—Å—è—Ü–∞',  # title
                '3 –º–µ—Å—è—Ü–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª—É—á—à–µ–º—É VPN',  # description
                '00001',  # invoice_payload
                provider_token,  # provider_token
                'RUB',  # currency
                prices_2, )

            bot.send_invoice(
                message.chat.id,  # chat_id
                '–î–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤',  # title
                ' –°–∫–∏–¥–∫–∞ 10%',  # description
                '00001',  # invoice_payload
                provider_token,  # provider_token
                'RUB',  # currency
                prices_3, )

        elif message.text == "–¢—Ä–∞—Ñ–∏–∫":
            traffic = dbcon.get_user_traffic(message)
            bot.send_message(sender_telegram_id, f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ `{traffic[0]}`", parse_mode="MARKDOWN")

        elif message.text == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏":
            dbcon.set_status(message, GET_OPERATIONS_REQUEST)
            bot.send_message(sender_telegram_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π:",
                             reply_markup=tg_keyboard.num_keyboard())

        elif message.text == "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å":
            dbcon.set_status(message, PROMO_CODE)
            bot.send_message(sender_telegram_id, "–ü–µ—Ä–µ—Ö–æ–¥...", reply_markup=tg_keyboard.make_money())

        elif message.text == "–ö–ª—é—á VPN":

            if dbcon.get_user_balance(sender_telegram_id) > MINIMAL_BALANCE:

                dbcon.set_status(message, CHECK_KEYS)
                bot.send_message(sender_telegram_id, "–ü—Ä–æ–≤–µ—Ä—è–µ–º –í–∞—à –∫–ª—é—á...")
                key = dbcon.get_user_vpn_key(sender_telegram_id)
                user_key = f"–ö–ª—é—á –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n`{key}`"
                dbcon.set_status(message, MAIN_MENU)
                bot.send_message(sender_telegram_id, user_key, parse_mode="MARKDOWN",
                                     reply_markup=tg_keyboard.main_keyboard())
                bot.send_message(sender_telegram_id, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é - /help")

            else:
                bot.send_message(sender_telegram_id,
                                 f"–í–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω–µ–µ {MINIMAL_BALANCE} —Ä—É–±–ª–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞",
                                 parse_mode="MARKDOWN", reply_markup=tg_keyboard.main_keyboard())

        else:
            bot.send_message(sender_telegram_id, "–ù–µ –ø–æ–Ω—è–ª –í–∞—Å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /help\n–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
                             reply_markup=tg_keyboard.main_keyboard())

    elif user_status == CREATE_MESSAGE_TO_SUPPORT:
        if len(message.text) < 100:
            task_id = dbcon.create_support_task(message)
            bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_telegram_id} –æ—Å—Ç–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}")
            dbcon.set_status(message, MAIN_MENU)
            bot.send_message(sender_telegram_id, f"–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ {task_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ.",
                           reply_markup=tg_keyboard.main_keyboard())
        else:
            bot.send_message(sender_telegram_id, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è 100 —Å–∏–º–≤–æ–ª–æ–≤.")
            dbcon.set_status(message, MAIN_MENU)

    elif user_status == GET_OPERATIONS_REQUEST:
        try:
            if len(message.text) < 5:
                operationsCount = int(message.text)
                if operationsCount > 30:
                    operationsCount = 31
            else:
                bot.send_message(ADMIN_ID,
                                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {sender_telegram_id}\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
                bot.send_message(sender_telegram_id, "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π",
                             reply_markup=tg_keyboard.num_keyboard())
        except Exception as error:
            bot.send_message(ADMIN_ID,
                             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {sender_telegram_id}\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
            bot.send_message(sender_telegram_id,
                             "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π",
                             reply_markup=tg_keyboard.num_keyboard())

        if int(operationsCount) <= 30 and int(operationsCount) > 0:
            operations_list = dbcon.get_operations_user(message, message.text)
            operations = str()
            for operation in operations_list:
                operations = operations + f"ID –æ–ø–µ—Ä–∞—Ü–∏–∏: `{operation[0]}`\n–°—É–º–º–∞: {operation[1]} —Ä—É–±.\n–î–∞—Ç–∞: {operation[2]}\n–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation[3]}\n\n"

            bot.send_message(sender_telegram_id, operations, parse_mode='MARKDOWN', reply_markup=tg_keyboard.main_keyboard())
            dbcon.set_status(message, MAIN_MENU)

        elif int(operationsCount) > 30 or int(operationsCount) < 0:
            bot.send_message(sender_telegram_id, messages.maxOperations,
                             reply_markup=tg_keyboard.main_keyboard())
            dbcon.set_status(message, MAIN_MENU)

        else:
            bot.send_message(sender_telegram_id, messages.notUnderstand,
                             reply_markup=tg_keyboard.main_keyboard())
            dbcon.set_status(message, MAIN_MENU)

    elif user_status == DONT_HAVE_KEYS:
        if message.text == "–î–∞":
            bot.send_message(sender_telegram_id, "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª—é—á–∞...")
            user_key = dbcon.get_user_vpn_key(sender_telegram_id)
            bot.send_message(sender_telegram_id, user_key, parse_mode="MARKDOWN",
                             reply_markup=tg_keyboard.main_keyboard())
            bot.send_message(sender_telegram_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ /help",
                             reply_markup=tg_keyboard.main_keyboard())
            dbcon.set_status(message, MAIN_MENU)


        elif message.text == "–ù–µ—Ç":
            bot.send_message(sender_telegram_id, "–û—Ç–º–µ–Ω–∞...", reply_markup=tg_keyboard.main_keyboard())
            dbcon.set_status(message, MAIN_MENU)

    elif user_status == PROMO_CODE:
        if message.text == "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥":
            bot.send_message(sender_telegram_id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=tg_keyboard.make_money())

        elif message.text == "–ó–∞–¥–∞–Ω–∏—è":
            bot.send_message(sender_telegram_id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=tg_keyboard.make_money())

        elif message.text == "–ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã":
            keyboard = telebot.types.InlineKeyboardMarkup()
            url_button = telebot.types.InlineKeyboardButton(text="–ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ", url="http://185.246.118.85")
            keyboard.add(url_button)
            bot.send_message(message.chat.id, "–ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ!", reply_markup=keyboard)

            bot.send_message(sender_telegram_id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=tg_keyboard.make_money())

        elif message.text == "–ü–æ—Å—Ç –≤ —Å–æ—Ü.—Å–µ—Ç–∏":
            bot.send_message(sender_telegram_id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=tg_keyboard.make_money())

        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
            bot.send_message(sender_telegram_id, "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=tg_keyboard.main_keyboard())
            dbcon.set_status(message, MAIN_MENU)

        else:
            dbcon.set_status(message, MAIN_MENU)
            bot.send_message(sender_telegram_id, "–ù–µ –ø–æ–Ω—è–ª –í–∞—Å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /help\n–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
                             reply_markup=tg_keyboard.main_keyboard())



    elif user_status == ADMIN_MENU:
        if message.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
            active_users, disabled_users = dbcon.get_list_users_with_state()
            active = str()
            disabled = str()
            active_count = 0
            disabled_count = 0

            for user in active_users:
                active_count += 1
                try:
                    key = user[5]
                except:
                    key = ""
                if key == "" or key == None:
                    key = "–∫–ª—é—á–∞ –Ω–µ—Ç"
                else:
                    key = f"{key[:7]}.."
                active = active + f"{user[3]}, {user[0]}, –±–∞–ª–∞–Ω—Å: {user[2]} —Ä—É–±. –∫–ª—é—á - {key}\n"

            for user in disabled_users:
                try:
                    key = user[5]
                except:
                    key = ""
                if key == "":
                    key = "–∫–ª—é—á–∞ –Ω–µ—Ç"
                else:
                    key = f"{key[:5]}.."
                disabled_count += 1
                disabled = disabled + f"{user[3]}, {user[0]}, –±–∞–ª–∞–Ω—Å: {user[2]} —Ä—É–±. –∫–ª—é—á - {key}\n"

            message_with_users = f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {active_count}\n{active}\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {disabled_count}\n{disabled}"
            bot.send_message(sender_telegram_id, message_with_users, parse_mode="MARKDOWN")

        elif message.text == "–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏":
            dbcon.set_status(message, 20)
            bot.send_message(sender_telegram_id, f"–í—ã—Ö–æ–¥...", reply_markup=tg_keyboard.main_keyboard())

        elif message.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":
            dbcon.set_status(message, 97)
            bot.send_message(sender_telegram_id, f"–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å—É–º–º—É –≤ –≤–∏–¥–µ: 24 500")

        elif message.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏ VPN":
            dbcon.set_status(message, 100)
            bot.send_message(sender_telegram_id, "–ü–µ—Ä–µ—Ö–æ–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏",
                             reply_markup=tg_keyboard.admin_keyboard_keys())

        elif message.text == "–õ–æ–≥–∏":
            bot.send_message(sender_telegram_id, "–û—Ç–ø—Ä–∞–≤–ª—è—é –ª–æ–≥–∏...")
            file = logger.get_file_log()
            bot.send_document(sender_telegram_id, file)

        elif message.text == "–í—ã—Ä—É—á–∫–∞":
            money_all = dbcon.execute_query("select sum(summ) from operations where  type in (2,6)")[0]
            money_last_mounth = dbcon.execute_query(
                "select sum(summ) from operations where type in (2,6) and operation_date > (SELECT (NOW() - interval '1 months'))")[0]
            bot.send_message(sender_telegram_id,
                             f"–í—ã—Ä—É—á–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {money_last_mounth} —Ä—É–±.\n–í—ã—Ä—É—á–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {money_all} —Ä—É–±.")

        elif message.text == "–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
            dbcon.set_status(message, 95)
            bot.send_message(sender_telegram_id, f"–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ c–æ–æ–±—â–µ–Ω–∏–µ")

        elif message.text == "–†–∞—Å—Å—ã–ª–∫–∞":
            dbcon.set_status(message, BROADCAST)
            bot.send_message(sender_telegram_id, f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")

        elif message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            connection_count = dbcon.get_count_connection_last_day()
            bot.send_message(sender_telegram_id, f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {connection_count} –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤")


        else:
            bot.send_message(sender_telegram_id, f"–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª", reply_markup=tg_keyboard.admin_keyboard())

    elif user_status == 97:
        dbcon.set_status(message, 96)
        data = message.text.split()
        id = data[0]
        summ = data[1]
        bot.send_message(sender_telegram_id, f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å ID {id} –Ω–∞ —Å—É–º–º—É {summ} —Ä—É–±. –í–µ—Ä–Ω–æ?",
                         reply_markup=tg_keyboard.yes_or_no_keyboard())
        dbcon.insert_in_db(f"insert into operation_buffer values ({id}, {summ})")

    elif user_status == 96:
        if message.text == "–î–∞":
            dbcon.add_money_to_user_from_buffer(message)
            creds = dbcon.execute_query("select user_id, summ from operation_buffer")
            dbcon.insert_in_db("delete from operation_buffer")
            bot.send_message(sender_telegram_id, f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω",
                             reply_markup=tg_keyboard.admin_keyboard())
            dbcon.calc_balances()

            try:
                telegram_id = dbcon.get_user_telegram_id(creds[0])[0]
                moneyInCome = creds[1]
                bot.send_message(telegram_id, f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {moneyInCome} —Ä—É–±.\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!")
                bot.send_message(sender_telegram_id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
                                 reply_markup=tg_keyboard.admin_keyboard())
                try:
                    bot.send_message(sender_telegram_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    dbcon.unblock_user(telegram_id)
                except Exception as error:
                    bot.send_message(sender_telegram_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n{error}")
                dbcon.set_status(message, ADMIN_MENU)
            except Exception as error:
                bot.send_message(sender_telegram_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`{error}`",
                                 reply_markup=tg_keyboard.admin_keyboard())
                dbcon.set_status(message, ADMIN_MENU)
            dbcon.set_status(message, ADMIN_MENU)

        elif message.text == "–ù–µ—Ç":
            dbcon.insert_in_db("delete from operation_buffer")
            dbcon.set_status(message, ADMIN_MENU)
            bot.send_message(sender_telegram_id, "–û—Ç–º–µ–Ω–∞", reply_markup=tg_keyboard.admin_keyboard())

        else:
            dbcon.insert_in_db("delete from operation_buffer")
            dbcon.set_status(message, ADMIN_MENU)
            bot.send_message(sender_telegram_id, "–ù–µ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç", reply_markup=tg_keyboard.admin_keyboard())

    elif user_status == 95:
        id = message.text.split(" ")[0]
        text_message = message.text.split(" ", 1)[1:][0]
        try:
            telegram_id = dbcon.get_user_telegram_id(id)[0]
            bot.send_message(telegram_id, f"{text_message}")
            bot.send_message(sender_telegram_id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
                             reply_markup=tg_keyboard.admin_keyboard())
            dbcon.set_status(message, ADMIN_MENU)
        except Exception as error:
            bot.send_message(sender_telegram_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`{error}`",
                             reply_markup=tg_keyboard.admin_keyboard())
            dbcon.set_status(message, ADMIN_MENU)

    elif user_status == BROADCAST:
        text = message.text
        list_telegram_id = dbcon.get_telegram_id_users()
        counter_done = 0
        counter_error = 0
        for telegram_id in list_telegram_id:
            try:
                bot.send_message(telegram_id[0], text)
                counter_done += 1
            except Exception as error:
                counter_error += 1
                logger.logger(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n{error}")

        bot.send_message(sender_telegram_id, f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {counter_done}\n–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {counter_error}",
                                    reply_markup=tg_keyboard.admin_keyboard())
        dbcon.set_status(message, ADMIN_MENU)


    else:
        bot.send_message(sender_telegram_id, "–ù–µ –ø–æ–Ω—è–ª –í–∞—Å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /help\n–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
                         reply_markup=tg_keyboard.main_keyboard())
        dbcon.set_status(message, MAIN_MENU)


# Handle all other messages with content_type 'text' (content_types defaults to ['text'])

@bot.shipping_query_handler(func=lambda query: True)
def shipping(shipping_query):
    bot.answer_shipping_query(shipping_query.id, ok=True, shipping_options=shipping_options,
                              error_message='Oh, seems like our Dog couriers are having a lunch right now. Try again later!')


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="Aliens tried to steal your card's CVV, but we successfully protected your credentials,"
                                                " try to pay again in a few minutes, we need a small rest.")


@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    telegram_id = message.from_user.id
    summ = message.successful_payment.total_amount / 100
    try:
        dbcon.add_money_to_user_from_pay_form(telegram_id, summ)
        bot.send_message(message.chat.id,
                         '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –≤–∞—à —Å—á–µ—Ç –≤ —Ä–∞–∑–º–µ—Ä–µ `{} {}`'.format(
                             message.successful_payment.total_amount / 100, message.successful_payment.currency),
                         parse_mode='Markdown')
    except Exception as error:
        logger.logger(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ\n{error}")
        bot.send_message(ADMIN_ID, f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—á–∏—Å–ª–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –Ω–∞ —Å—É–º–º—É {summ}')
        bot.send_message(message.chat.id,
                         '–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ —Ä–∞–∑–º–µ—Ä–µ `{} {}`'.format(
                             message.successful_payment.total_amount / 100, message.successful_payment.currency),
                         parse_mode='Markdown')


@bot.message_handler(func=lambda message: True)
def echo_message(message):
    bot.send_message(message.from_user.id, "–ù–µ –ø–æ–Ω—è–ª –í–∞—Å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /help",
                     reply_markup=tg_keyboard.main_keyboard())
    dbcon.set_status(message, 20)


logger.logger("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
bot.infinity_polling()
